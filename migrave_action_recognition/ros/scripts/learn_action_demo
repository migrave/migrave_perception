#!/usr/bin/env python3

import rospy
import actionlib
import argparse

from mas_tools.ros_utils import get_package_path
from action_recognition.action_learner import ActionLearner
from action_recognition.action_model import ActionModel
from migrave_action_recognition.msg import LearnActionAction, LearnActionResult

class LearnActionServer(object):
    '''A server exposing an action for learning bodily action.
    '''

    def __init__(self, args):
        rospy.loginfo('Initialising Action Learning Server')

        model_cfg_file = get_package_path("migrave_action_recognition", "config", "action_model_config.yaml")
        action_list_file = get_package_path("migrave_action_recognition", "config", "action_list.txt")
        args.save_path = get_package_path("migrave_action_recognition", "data", "learned_data")

        action_model = ActionModel(model_cfg_file, action_list_file)
        self.action_learner = ActionLearner(action_model, **vars(args))

        self.action_server = actionlib.SimpleActionServer('learn_action', LearnActionAction, self.learn, False)
        self.action_server.start()
        rospy.loginfo('learn_action server ready')

    def learn(self, action):
        rospy.loginfo('Received an action learn request')
        rospy.loginfo('Learning {} actions: {}'.format(action.num_actions, action.action_names))

        self.action_learner.learn(action)

        result = LearnActionResult()
        result.success = True
        self.action_server.set_succeeded(result)


if __name__ == '__main__':
    rospy.init_node('learn_action_server')
    parser = argparse.ArgumentParser(description='Learn Action Demo')
    parser.add_argument('-s', '--save-path', type=str, required=True,
                        help='Path to directory where learned data to be saved')
    parser.add_argument('-t', '--nuitrack-skeleton-topic', type=str,
                        default='/qt_nuitrack_app/skeletons',
                        help='Name of skeleton topic')
    parser.add_argument('-n', '--num-seq', type=int, default=25,
                        help='Number of sequences to be captured')
    parser.add_argument('-l', '--seq-size', type=int, default=50,
                        help='Number of sequences to be captured')

    args = parser.parse_args()
    learn_action_server = LearnActionServer(args)

    try:
        while not rospy.is_shutdown():
            rospy.spin()

    except (KeyboardInterrupt, SystemExit):
        print('Learning Server interrupted; exiting...')
