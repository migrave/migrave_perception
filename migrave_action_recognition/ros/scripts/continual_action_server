#!/usr/bin/env python3

import rospy
import actionlib

from migrave_action_recognition.action_states import ContinualActionLearningSM
from migrave_action_recognition.msg import ContinualActionLearningAction

class ContinualActionLearningServer(object):
    def __init__(self):
        rospy.loginfo('[continual_action_learning] Initialising state machine')
        self.action_sm = ContinualActionLearningSM()
        rospy.loginfo('[continual_action_learning] State machine initialised')
        
        rospy.loginfo('[continual_action_learning] Initialising server')
        self.action_server = actionlib.SimpleActionServer('continual_action_learning', ContinualActionLearningAction, self.execute, False)
        self.action_server.start()
        rospy.loginfo('[continual_action_learning] Server ready')
        
    def execute(self, goal):
        rospy.loginfo('[continual_action_learning] Received an action request')
        
        self.action_sm.goal = goal
        self.action_sm.execution_requested = True
        
        #while not self.action_sm.result:
        #    rospy.sleep(0.05)
        
        self.action_server.set_succeeded()

if __name__ == "__main__":
    rospy.init_node("continual_action_learning_server")
    
    action_learning_server = ContinualActionLearningServer()
    
    try:
        action_learning_server.action_sm.run()
        while action_learning_server.action_sm.is_running and not rospy.is_shutdown():
            rospy.spin()
    except (KeyboardInterrupt, SystemExit):
        print('{0} interrupted; exiting...'.format(action_learning_server.action_sm.name))
        action_learning_server.action_sm.stop()
