#!/usr/bin/env python3

import rospy
import argparse
import actionlib

from migrave_action_recognition.action_states import ContinualActionLearningSM
from migrave_action_recognition.msg import ContinualActionLearningAction

class ContinualActionLearningServer(object):
    def __init__(self, args):
        rospy.loginfo('[continual_action_learning] Initialising state machine')
        self.action_sm = ContinualActionLearningSM(args)
        rospy.loginfo('[continual_action_learning] State machine initialised')

        rospy.loginfo('[continual_action_learning] Initialising server')
        self.action_server = actionlib.SimpleActionServer('continual_action_learning', ContinualActionLearningAction, self.execute, False)
        self.action_server.start()
        rospy.loginfo('[continual_action_learning] Server ready')

    def execute(self, goal):
        rospy.loginfo('[continual_action_learning] Received an action request')

        self.action_sm.goal = goal
        self.action_sm.execution_requested = True

        #while not self.action_sm.result:
        #    rospy.sleep(0.05)

        self.action_server.set_succeeded()

if __name__ == "__main__":
    rospy.init_node("continual_action_learning_server")

    parser = argparse.ArgumentParser(description='Continual Action Server')
    parser.add_argument('-m', '--model-type', type=str, default='1',
                        help='Model type to use')
    parser.add_argument('-t', '--nuitrack-skeleton-topic', type=str,
                        default='/qt_nuitrack_app/skeletons',
                        help='Name of skeleton topic')
    parser.add_argument('-l', '--seq-size', type=int, default=50,
                        help='Length of sequences for classifying and learning')
    parser.add_argument('-n', '--num-seq', type=int, default=25,
                        help='Number of sequences to be captured')
    parser.add_argument('-r', '--max-recovery-attempts', type=int, default=1,
                        help='Number of attempts to recover server')

    args = parser.parse_args()
    action_learning_server = ContinualActionLearningServer(args)

    try:
        action_learning_server.action_sm.run()
        while action_learning_server.action_sm.is_running and not rospy.is_shutdown():
            rospy.spin()
    except (KeyboardInterrupt, SystemExit):
        print('{0} interrupted; exiting...'.format(action_learning_server.action_sm.name))
        action_learning_server.action_sm.stop()
